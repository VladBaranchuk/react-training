// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back_end.DataAccess;

#nullable disable

namespace back_end.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241111191449_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DayDish", b =>
                {
                    b.Property<Guid>("DaysId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DaysId", "DishesId");

                    b.HasIndex("DishesId");

                    b.ToTable("DayDish");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Consumption")
                        .HasColumnType("int");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DoDrink")
                        .HasColumnType("bit");

                    b.Property<bool>("DoMorningExamples")
                        .HasColumnType("bit");

                    b.Property<bool>("DoSmoke")
                        .HasColumnType("bit");

                    b.Property<double>("EarlyWeight")
                        .HasColumnType("float");

                    b.Property<int>("Fatigue")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishSleep")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sleepy")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartSleep")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("float");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Fatigue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fatigue");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "You are completely awake, alert, and feel no signs of fatigue.\r\n                        You are well-rested and have high mental and physical energy.",
                            Title = "Fully alert, wide awake"
                        },
                        new
                        {
                            Id = 2,
                            Description = "You are mostly awake but might feel slightly tired or fatigued.\r\n                        Your alertness is generally good, but you may notice a minor decrease \r\n                        in energy compared to being fully alert.",
                            Title = "Very lively, responsivem but not at peak"
                        },
                        new
                        {
                            Id = 3,
                            Description = "You are more awake than asleep, but do feel some fatigue. You\r\n                        might be experiencing some difficultly in maintaining peak alterness\r\n                        and your energy levels are decreasing.",
                            Title = "Okay, somewhat fresh"
                        },
                        new
                        {
                            Id = 4,
                            Description = "You are equally awake and asleep, indicating moderate fatigue.\r\n                        You might find it challenging to stay fully alert and drowsiness is\r\n                        becoming more apparent.",
                            Title = "A little tired, less than fresh"
                        },
                        new
                        {
                            Id = 5,
                            Description = "you are more asleep than awake and significant fatigue is setting in.\r\n                        Your ability to stay alert and focussed is compromised and you may struggle\r\n                        to remain awake.",
                            Title = "Moderately tired, let down"
                        },
                        new
                        {
                            Id = 6,
                            Description = "You are mostly alseep but can still be awakened with relative ease.\r\n                        Extreme fatigue has taken over and is is becoming increasingly challenging\r\n                        to stay awake and alert.",
                            Title = "Extremely tired, very difficult to concentrate"
                        },
                        new
                        {
                            Id = 7,
                            Description = "You are completely asleep and difficult to awaken. This is the\r\n                        highest level of fatigue. You are in a deep sleep and are not fit for tasks\r\n                        requiring wakefulness.",
                            Title = "Completely exhausted, unable to function effectively"
                        });
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mood");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "At this highest stage, you fell extremely happy and excited.\r\n                        Your energy levels are high, and you might feel a strong sense of enthusiasm\r\n                        and optimism.",
                            Title = "Elated"
                        },
                        new
                        {
                            Id = 2,
                            Description = "You feel positive and content. You might find joy in everyday\r\n                        activities and feel generally satisfied with life.",
                            Title = "Happy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "You feel neither particularly happy or sad. Your mood is stable,\r\n                        and you can go about your day without strong emotional swings.",
                            Title = "Neutral"
                        },
                        new
                        {
                            Id = 4,
                            Description = "You feel down or unhappy, but not as intensely as in a depressed state.\r\n                        This mood can be triggered by specific events or situations.",
                            Title = "Sad"
                        },
                        new
                        {
                            Id = 5,
                            Description = "At this stage, you might feel very low, sad, or hopeless.\r\n                        It can be difficult to find motivation or joy in daily activities.",
                            Title = "Depressed"
                        });
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Sleepy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sleepy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "You feel fully awake, alert, and energetic. Your mind is clear,\r\n                        and you are ready to take on the day with a positive attitude.",
                            Title = "Cheerful and rested"
                        },
                        new
                        {
                            Id = 2,
                            Description = "you are awake and can perform daily activities, but you feel\r\n                        a persistent sense of tiredness. You might need a coffe or a short nap to\r\n                        boost your energy.",
                            Title = "Awake but tired"
                        },
                        new
                        {
                            Id = 3,
                            Description = "You feel a strong urge to sleep, but you can still function.\r\n                        Your reactions are slower, and you might feel a bit foggy or sluggish.",
                            Title = "Drowsy"
                        },
                        new
                        {
                            Id = 4,
                            Description = "You are struggling to stay awake, and your body feels heavy.\r\n                        You might experience frequent yawning and have difficulty focusing on tasks.",
                            Title = "Very sleppy"
                        },
                        new
                        {
                            Id = 5,
                            Description = "At this level, you feel completely drained and can barely keep\r\n                        your eyes open. Concentration is nearly impossible. and you might find\r\n                        yourself nodding off frequently.",
                            Title = "Completely exhausted"
                        });
                });

            modelBuilder.Entity("DayDish", b =>
                {
                    b.HasOne("back_end.DataAccess.Entities.Day", null)
                        .WithMany()
                        .HasForeignKey("DaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.DataAccess.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Activity", b =>
                {
                    b.HasOne("back_end.DataAccess.Entities.Day", null)
                        .WithMany("Activities")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Day", b =>
                {
                    b.HasOne("back_end.DataAccess.Entities.Profile", null)
                        .WithMany("Days")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Day", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("back_end.DataAccess.Entities.Profile", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
